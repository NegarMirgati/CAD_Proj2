% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 27-Nov-2017 13:34:55
%
% This script assumes these variables are defined:
%
%   iniiiiiiii - input data.
%   outiiiiiiii - target data.

%x =iniiiiiiii ; input;
x = input;
%t = outiiiiiiii;
t = out;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 30;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 85/100;
net.divideParam.valRatio = 5/100;
net.divideParam.testRatio = 10/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

inputTest = floor((rand(3,50) .* 10 ))+1;

tStartNN = cputime;
outputNN = net(inputTest);
tNN = cputime - tStartNN;
fprintf('%s ' , 'tNN');
disp(tNN)
fprintf('%s ' , '\n');

tStartF = cputime;
outputF = zeros(1,50);
for i=1:+1:50
    outputF(1,i) = func(inputTest,i);
end
tF = cputime - tStartF;
fprintf('%s ' , 'tF');
disp(tF)
fprintf('%s ' , '\n');

temp = outputNN - outputF ;
s = sum(temp);
sfinal = sum(s,2);

sOutF = sum(outputF);
SOutputF = sum(sOutF,2);

answer = abs(sfinal) ./ abs(SOutputF).*100;
fprintf('%s', 'answer :')
disp(answer)


% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

